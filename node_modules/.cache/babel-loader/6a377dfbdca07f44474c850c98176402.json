{"ast":null,"code":"import _slicedToArray from \"E:\\\\My Codes\\\\Web Development\\\\ReactJs\\\\Text-Utils\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\My Codes\\\\Web Development\\\\ReactJs\\\\Text-Utils\\\\src\\\\Components\\\\About.js\";\nimport React, { useState } from \"react\"; // rfc\n\nexport default function About() {\n  // state variables\n  var _useState = useState({\n    backgroundColor: \"rgb(34, 48, 60)\",\n    color: \"white\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      myStyle1 = _useState2[0],\n      setMyStyle1 = _useState2[1];\n\n  var _useState3 = useState(\"Dark Mode\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      btnText = _useState4[0],\n      setBtnText = _useState4[1];\n\n  var _useState5 = useState(\"btn btn-dark\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cngClass = _useState6[0],\n      setcngClass = _useState6[1];\n\n  var myStyle = {\n    color: \"blue\"\n  }; // methods\n\n  var toggleDarkMode = function toggleDarkMode() {\n    if (myStyle1.color == \"white\") {\n      setMyStyle1({\n        backgroundColor: \"white\",\n        color: \"black\"\n      });\n      setBtnText(\"Dark Mode\");\n      setcngClass(\"btn btn-dark\");\n    } else {\n      setMyStyle1({\n        backgroundColor: \"rgb(34, 48, 60)\",\n        color: \"white\"\n      });\n      setBtnText(\"Light Mode\");\n      setcngClass(\"btn btn-light\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"my-3 mx-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"About Us\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion\",\n    id: \"accordionExample\",\n    style: myStyle1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingOne\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button\",\n    type: \"button\",\n    \"data-bs-toggle\": \"collapse\",\n    \"data-bs-target\": \"#collapseOne\",\n    \"aria-expanded\": \"true\",\n    \"aria-controls\": \"collapseOne\",\n    style: myStyle1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"Accordion Item #1\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseOne\",\n    className: \"accordion-collapse collapse\",\n    \"aria-labelledby\": \"headingOne\",\n    \"data-bs-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    style: myStyle1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"This is the first item's accordion body.\"), \" It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 48\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingTwo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button collapsed\",\n    type: \"button\",\n    \"data-bs-toggle\": \"collapse\",\n    \"data-bs-target\": \"#collapseTwo\",\n    \"aria-expanded\": \"false\",\n    \"aria-controls\": \"collapseTwo\",\n    style: myStyle1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Accordion Item #2\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseTwo\",\n    className: \"accordion-collapse collapse\",\n    \"aria-labelledby\": \"headingTwo\",\n    \"data-bs-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    style: myStyle1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 48\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"accordion-header\",\n    id: \"headingThree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"accordion-button collapsed\",\n    type: \"button\",\n    \"data-bs-toggle\": \"collapse\",\n    \"data-bs-target\": \"#collapseThree\",\n    \"aria-expanded\": \"false\",\n    \"aria-controls\": \"collapseThree\",\n    style: myStyle1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"Accordion Item #3\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"collapseThree\",\n    className: \"accordion-collapse collapse\",\n    \"aria-labelledby\": \"headingThree\",\n    \"data-bs-parent\": \"#accordionExample\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"accordion-body\",\n    style: myStyle1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, \"This is the third item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 48\n    }\n  }, \".accordion-body\"), \", though the transition does limit overflow.\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: cngClass,\n    onClick: toggleDarkMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, btnText)));\n}","map":{"version":3,"names":["React","useState","About","backgroundColor","color","myStyle1","setMyStyle1","btnText","setBtnText","cngClass","setcngClass","myStyle","toggleDarkMode"],"sources":["E:/My Codes/Web Development/ReactJs/Text-Utils/src/Components/About.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// rfc\r\nexport default function About() {\r\n  // state variables\r\n  const [myStyle1, setMyStyle1] = useState({\r\n    backgroundColor: \"rgb(34, 48, 60)\",\r\n    color: \"white\",\r\n  });\r\n  const [btnText, setBtnText] = useState(\"Dark Mode\");\r\n  const [cngClass, setcngClass] = useState(\"btn btn-dark\");\r\n\r\n  let myStyle = {\r\n    color: \"blue\",\r\n  };\r\n  // methods\r\n  const toggleDarkMode = () => {\r\n    if (myStyle1.color == \"white\") {\r\n      setMyStyle1({\r\n        backgroundColor: \"white\",\r\n        color: \"black\",\r\n      });\r\n      setBtnText(\"Dark Mode\");\r\n      setcngClass(\"btn btn-dark\");\r\n    } else {\r\n      setMyStyle1({\r\n        backgroundColor: \"rgb(34, 48, 60)\",\r\n        color: \"white\",\r\n      });\r\n      setBtnText(\"Light Mode\");\r\n      setcngClass(\"btn btn-light\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"my-3 mx-2\">\r\n        About Us\r\n      </h2>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle1}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle1}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle1}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle1}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle1}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle1}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle1}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"my-3\">\r\n        <button type=\"button\" className={cngClass} onClick={toggleDarkMode}>\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,eAAe,SAASC,KAAT,GAAiB;EAC9B;EAD8B,gBAEED,QAAQ,CAAC;IACvCE,eAAe,EAAE,iBADsB;IAEvCC,KAAK,EAAE;EAFgC,CAAD,CAFV;EAAA;EAAA,IAEvBC,QAFuB;EAAA,IAEbC,WAFa;;EAAA,iBAMAL,QAAQ,CAAC,WAAD,CANR;EAAA;EAAA,IAMvBM,OANuB;EAAA,IAMdC,UANc;;EAAA,iBAOEP,QAAQ,CAAC,cAAD,CAPV;EAAA;EAAA,IAOvBQ,QAPuB;EAAA,IAObC,WAPa;;EAS9B,IAAIC,OAAO,GAAG;IACZP,KAAK,EAAE;EADK,CAAd,CAT8B,CAY9B;;EACA,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,GAAM;IAC3B,IAAIP,QAAQ,CAACD,KAAT,IAAkB,OAAtB,EAA+B;MAC7BE,WAAW,CAAC;QACVH,eAAe,EAAE,OADP;QAEVC,KAAK,EAAE;MAFG,CAAD,CAAX;MAIAI,UAAU,CAAC,WAAD,CAAV;MACAE,WAAW,CAAC,cAAD,CAAX;IACD,CAPD,MAOO;MACLJ,WAAW,CAAC;QACVH,eAAe,EAAE,iBADP;QAEVC,KAAK,EAAE;MAFG,CAAD,CAAX;MAIAI,UAAU,CAAC,YAAD,CAAV;MACAE,WAAW,CAAC,eAAD,CAAX;IACD;EACF,CAhBD;;EAiBA,oBACE;IAAK,SAAS,EAAC,WAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAI,SAAS,EAAC,WAAd;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cADF,eAIE;IAAK,SAAS,EAAC,WAAf;IAA2B,EAAE,EAAC,kBAA9B;IAAiD,KAAK,EAAEL,QAAxD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAK,SAAS,EAAC,gBAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAI,SAAS,EAAC,kBAAd;IAAiC,EAAE,EAAC,YAApC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IACE,SAAS,EAAC,kBADZ;IAEE,IAAI,EAAC,QAFP;IAGE,kBAAe,UAHjB;IAIE,kBAAe,cAJjB;IAKE,iBAAc,MALhB;IAME,iBAAc,aANhB;IAOE,KAAK,EAAEA,QAPT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uBADF,CADF,eAcE;IACE,EAAE,EAAC,aADL;IAEE,SAAS,EAAC,6BAFZ;IAGE,mBAAgB,YAHlB;IAIE,kBAAe,mBAJjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAME;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAEA,QAAvC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,8CADF,qYAOmC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAPnC,iDANF,CAdF,CADF,eAiCE;IAAK,SAAS,EAAC,gBAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAI,SAAS,EAAC,kBAAd;IAAiC,EAAE,EAAC,YAApC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IACE,SAAS,EAAC,4BADZ;IAEE,IAAI,EAAC,QAFP;IAGE,kBAAe,UAHjB;IAIE,kBAAe,cAJjB;IAKE,iBAAc,OALhB;IAME,iBAAc,aANhB;IAOE,KAAK,EAAEA,QAPT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uBADF,CADF,eAcE;IACE,EAAE,EAAC,aADL;IAEE,SAAS,EAAC,6BAFZ;IAGE,mBAAgB,YAHlB;IAIE,kBAAe,mBAJjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAME;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAEA,QAAvC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,+CADF,sYAOmC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAPnC,iDANF,CAdF,CAjCF,eAiEE;IAAK,SAAS,EAAC,gBAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAI,SAAS,EAAC,kBAAd;IAAiC,EAAE,EAAC,cAApC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IACE,SAAS,EAAC,4BADZ;IAEE,IAAI,EAAC,QAFP;IAGE,kBAAe,UAHjB;IAIE,kBAAe,gBAJjB;IAKE,iBAAc,OALhB;IAME,iBAAc,eANhB;IAOE,KAAK,EAAEA,QAPT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uBADF,CADF,eAcE;IACE,EAAE,EAAC,eADL;IAEE,SAAS,EAAC,6BAFZ;IAGE,mBAAgB,cAHlB;IAIE,kBAAe,mBAJjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAME;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAEA,QAAvC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,8CADF,sYAOmC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAPnC,iDANF,CAdF,CAjEF,CAJF,eAsGE;IAAK,SAAS,EAAC,MAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,IAAI,EAAC,QAAb;IAAsB,SAAS,EAAEI,QAAjC;IAA2C,OAAO,EAAEG,cAApD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGL,OADH,CADF,CAtGF,CADF;AA8GD"},"metadata":{},"sourceType":"module"}